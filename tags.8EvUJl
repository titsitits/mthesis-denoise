parser	crop_ds.py	/^parser = argparse.ArgumentParser(description='Image cropper with overlap (relies on crop_img.sh)/;"	v
args	crop_ds.py	/^args = parser.parse_args()$/;"	v
resdir	crop_ds.py	/^resdir = os.path.join(args.resdir, 'ds_'+str(args.cs)+'_'+str(args.ucs))$/;"	v
todolist	crop_ds.py	/^todolist = []$/;"	v
sets	crop_ds.py	/^sets = os.listdir(args.dsdir)$/;"	v
inpath	crop_ds.py	/^            inpath=os.path.join(args.dsdir, aset, image)$/;"	v
isoval	crop_ds.py	/^            isoval=image.split('_')[-1][:-4]$/;"	v
outdir	crop_ds.py	/^            outdir=os.path.join(resdir, aset, isoval)$/;"	v
inpath	crop_ds.py	/^        inpath = os.path.join(args.dsdir, image)$/;"	v
outdir	crop_ds.py	/^        outdir = os.path.join(resdir, image[:-4])$/;"	v
processes	crop_ds.py	/^processes = set()$/;"	v
max_threads	crop_ds.py	/^max_threads =args.max_threads if args.max_threads else cpu_count()$/;"	v
parse_args	denoise_single_crop.py	/^def parse_args():$/;"	f
args	denoise_single_crop.py	/^    args = parse_args()$/;"	v
model_path	denoise_single_crop.py	/^        model_path = args.model_path$/;"	v
model_dir	denoise_single_crop.py	/^        model_dir = args.model_dir if args.model_dir else os.path.join('models', args.model_subd/;"	v
model_path	denoise_single_crop.py	/^        model_path = os.path.join(model_dir, "latest_model.pth")$/;"	v
model_path	denoise_single_crop.py	/^        model_path = os.path.join(model_path, sorted(os.listdir(model_path))[-1])$/;"	v
totensor	denoise_single_crop.py	/^    totensor = torchvision.transforms.ToTensor()$/;"	v
model	denoise_single_crop.py	/^    model = torch.load(model_path, map_location='cuda:'+str(args.cuda_device))$/;"	v
model	denoise_single_crop.py	/^        model = model.cuda()$/;"	v
get_and_pad_image	denoise_single_crop.py	/^    def get_and_pad_image(path):$/;"	f
y_	denoise_single_crop.py	/^    y_ = get_and_pad_image(args.noisy_path)$/;"	v
y_	denoise_single_crop.py	/^    y_ = y_.view(1,-1,y_.shape[1], y_.shape[2])$/;"	v
y_	denoise_single_crop.py	/^    y_ = y_.cuda()$/;"	v
x_	denoise_single_crop.py	/^    x_ = model(y_)$/;"	v
parser	dl_ds_1.py	/^parser = argparse.ArgumentParser(description='PyTorch DnCNN')$/;"	v
args	dl_ds_1.py	/^args = parser.parse_args()$/;"	v
nindlist	dl_ds_1.py	/^nindlist = [$/;"	v
manset	dl_ds_1.py	/^manset = [$/;"	v
burl	dl_ds_1.py	/^burl = 'https:\/\/commons.wikimedia.org\/wiki\/Special:Redirect\/file\/'$/;"	v
download	dl_ds_1.py	/^def download(imlist, dsname, targetdir, prefix='ISO'):$/;"	f
sortISOs	dataset_torch_3.py	/^def sortISOs(rawISOs):$/;"	f
DenoisingDataset	dataset_torch_3.py	/^class DenoisingDataset(Dataset):$/;"	c
__init__	dataset_torch_3.py	/^    def __init__(self, datadir, testreserve=[], yisx=False, compressionmin=100, compressionmax=1/;"	m	class:DenoisingDataset
get_and_pad	dataset_torch_3.py	/^    def get_and_pad(self, index):$/;"	m	class:DenoisingDataset
__getitem__	dataset_torch_3.py	/^    def __getitem__(self, reqindex):$/;"	m	class:DenoisingDataset
__len__	dataset_torch_3.py	/^    def __len__(self):$/;"	m	class:DenoisingDataset
parse_args	denoise_dir.py	/^def parse_args():$/;"	f
args	denoise_dir.py	/^    args = parse_args()$/;"	v
model_path	denoise_dir.py	/^        model_path = args.model_path$/;"	v
model_dir	denoise_dir.py	/^        model_dir = args.model_dir if args.model_dir else os.path.join('models', args.model_subd/;"	v
model_path	denoise_dir.py	/^        model_path = os.path.join(model_dir, "latest_model.pth")$/;"	v
model_path	denoise_dir.py	/^        model_path = os.path.join(model_path, sorted(os.listdir(model_path))[-1])$/;"	v
noisy_dir	denoise_dir.py	/^    noisy_dir = args.noisy_dir[:-1] if args.noisy_dir[-1] == '\/' else args.noisy_dir$/;"	v
cs	denoise_dir.py	/^    cs, ucs = [int(i) for i in noisy_dir.split('_')[-2:]]$/;"	v
ucs	denoise_dir.py	/^    cs, ucs = [int(i) for i in noisy_dir.split('_')[-2:]]$/;"	v
totensor	denoise_dir.py	/^    totensor = torchvision.transforms.ToTensor()$/;"	v
model	denoise_dir.py	/^    model = torch.load(model_path, map_location='cuda:'+str(args.cuda_device))$/;"	v
model	denoise_dir.py	/^        model = model.cuda()$/;"	v
get_and_pad_image	denoise_dir.py	/^    def get_and_pad_image(path):$/;"	f
dest_dirs	denoise_dir.py	/^    dest_dirs = set()$/;"	v
base_save_dir	denoise_dir.py	/^    base_save_dir=os.path.join(args.result_dir, model_path.split('\/')[-2])$/;"	v
cur_img_sav_dir	denoise_dir.py	/^            cur_img_sav_dir = os.path.join(base_save_dir, root.split(noisy_dir)[-1][1:])$/;"	v
cur_img_sav_path	denoise_dir.py	/^            cur_img_sav_path = os.path.join(cur_img_sav_dir, name[:-4]+'_denoised.')+args.ext$/;"	v
y_	denoise_dir.py	/^            y_ = get_and_pad_image(os.path.join(root, name))$/;"	v
start_time	denoise_dir.py	/^            start_time = time.time()$/;"	v
y_	denoise_dir.py	/^            y_ = y_.cuda()$/;"	v
x_	denoise_dir.py	/^            x_ = model(y_)$/;"	v
elapsed_time	denoise_dir.py	/^            elapsed_time = time.time() - start_time$/;"	v
totensor	loss.py	/^totensor = torchvision.transforms.ToTensor()$/;"	v
MSE	loss.py	/^MSE = torch.nn.MSELoss()$/;"	v
SSIM	loss.py	/^SSIM = pytorch_ssim.SSIM()$/;"	v
find_gt_path	loss.py	/^def find_gt_path(denoised_fn, gt_dir):$/;"	f
files	loss.py	/^def files(path):$/;"	f
gen_score	loss.py	/^def gen_score(noisy_dir, gt_dir='datasets\/test\/ds_fs'):$/;"	f
parser	loss.py	/^    parser = argparse.ArgumentParser(description='Get SSIM score and MSE loss from test images')$/;"	v
args	loss.py	/^    args, _ = parser.parse_known_args()$/;"	v
_	loss.py	/^    args, _ = parser.parse_known_args()$/;"	v
get_attr	uncrop_image.py	/^def get_attr(fn, attr):$/;"	f
uncrop	uncrop_image.py	/^def uncrop(crop_dir, ext='jpg'):$/;"	f
get_crop_at	uncrop_image.py	/^    def get_crop_at(xcnt,ycnt):$/;"	f	function:uncrop	file:
parser	uncrop_image.py	/^    parser = argparse.ArgumentParser(description='Images uncropper. Takes a directory [SETNAME] /;"	v
args	uncrop_image.py	/^    args, _ = parser.parse_known_args()$/;"	v
_	uncrop_image.py	/^    args, _ = parser.parse_known_args()$/;"	v
np	run_nn.py	/^import numpy as np$/;"	I
optim	run_nn.py	/^import torch.optim as optim$/;"	I
parser	run_nn.py	/^parser = argparse.ArgumentParser(description='PyTorch Denoising network trainer')$/;"	v
args	run_nn.py	/^args = parser.parse_args()$/;"	v
batch_size	run_nn.py	/^batch_size = args.batch_size$/;"	v
cuda	run_nn.py	/^cuda = torch.cuda.is_available()$/;"	v
find_experiment	run_nn.py	/^def find_experiment():$/;"	f
expname	run_nn.py	/^    expname = args.expname$/;"	v
expname	run_nn.py	/^        expname = find_experiment()$/;"	v
save_dir	run_nn.py	/^save_dir = os.path.join('models', expname)$/;"	v
res_dir	run_nn.py	/^res_dir = os.path.join(args.result_dir, expname)$/;"	v
findLastCheckpoint	run_nn.py	/^def findLastCheckpoint(save_dir):$/;"	f
log	run_nn.py	/^def log(*args, **kwargs):$/;"	f
model	run_nn.py	/^        model = nnModules.DnCNN(depth=args.depth, n_channels=args.n_channels, find_noise=args.fi/;"	v
model	run_nn.py	/^        model = nnModules.RedCNN(depth=args.depth, n_channels=args.n_channels, kernel_size=args./;"	v
model	run_nn.py	/^        model = nnModules.RedishCNN(depth=args.depth, n_channels=args.n_channels, kernel_size=ar/;"	v
model	run_nn.py	/^        model = nnModules.UNet(3,3)$/;"	v
initial_epoch	run_nn.py	/^    initial_epoch = findLastCheckpoint(save_dir=save_dir)  # load the last model in matconvnet s/;"	v
model	run_nn.py	/^        model = torch.load(os.path.join(save_dir, 'model_%03d.pth' % initial_epoch))$/;"	v
criterion	run_nn.py	/^        criterion = pytorch_ssim.SSIM()$/;"	v
criterion	run_nn.py	/^        criterion = torch.nn.MSELoss()$/;"	v
model	run_nn.py	/^        model = model.cuda()$/;"	v
criterion	run_nn.py	/^        criterion = criterion.cuda()$/;"	v
DDataset	run_nn.py	/^    DDataset = DenoisingDataset(args.train_data, compressionmin=args.compressionmin, compression/;"	v
DLoader	run_nn.py	/^    DLoader = DataLoader(dataset=DDataset, num_workers=8, drop_last=True, batch_size=batch_size,/;"	v
loss_crop_lb	run_nn.py	/^    loss_crop_lb = int((DDataset.cs-DDataset.ucs)\/2)$/;"	v
loss_crop_up	run_nn.py	/^    loss_crop_up = loss_crop_lb+DDataset.ucs$/;"	v
optimizer	run_nn.py	/^    optimizer = optim.Adam(model.parameters(), lr=args.lr)$/;"	v
lrlambda	run_nn.py	/^        lrlambda = lambda epoch, lr=args.lr: randint(1,.1\/lr)\/randint(1,1\/lr)$/;"	f
scheduler	run_nn.py	/^        scheduler = LambdaLR(optimizer, lrlambda)$/;"	v
scheduler	run_nn.py	/^        scheduler = MultiStepLR(optimizer, milestones=[args.epoch*.02, args.epoch*.06, args.epoc/;"	v
start_time	run_nn.py	/^    start_time = time.time()$/;"	v
loss_ten	run_nn.py	/^    loss_ten=0$/;"	v
epoch_loss	run_nn.py	/^        epoch_loss = 0$/;"	v
epoch_time	run_nn.py	/^        epoch_time = time.time()$/;"	v
batch_x	run_nn.py	/^                batch_x, batch_y = batch_xy[0].cuda(), batch_xy[1].cuda()$/;"	v
batch_y	run_nn.py	/^                batch_x, batch_y = batch_xy[0].cuda(), batch_xy[1].cuda()$/;"	v
loss	run_nn.py	/^            loss = criterion(model(batch_y)[:,:,loss_crop_lb:loss_crop_up, loss_crop_lb:loss_cro/;"	v
loss	run_nn.py	/^                loss = 1 - loss$/;"	v
loss_ten	run_nn.py	/^                loss_ten = 0$/;"	v
elapsed_time	run_nn.py	/^        elapsed_time = time.time() - epoch_time$/;"	v
plt	grapher.py	/^import matplotlib.pyplot as plt$/;"	I
parser	grapher.py	/^parser = argparse.ArgumentParser(description='Grapher')$/;"	v
args	grapher.py	/^args = parser.parse_args()$/;"	v
data	grapher.py	/^data = dict()$/;"	v
components	grapher.py	/^components = args.components if args.components else ['Noisy', 'NIND', 'Artificial', 'BM3D']$/;"	v
find_relevant_experiments	grapher.py	/^def find_relevant_experiments(component):$/;"	f
add_exp_to_data	grapher.py	/^    def add_exp_to_data(experiment):$/;"	f	function:find_relevant_experiments	file:
parse_resfiles	grapher.py	/^def parse_resfiles(component):$/;"	f
images	grapher.py	/^images = list(data[components[0]]['results'].keys())$/;"	v
_	grapher.py	/^    _, isos = sortISOs(list(data[components[0]]['results'][image].keys()))$/;"	v
isos	grapher.py	/^    _, isos = sortISOs(list(data[components[0]]['results'][image].keys()))$/;"	v
ssimscore	grapher.py	/^        ssimscore = [data[component]['results'][image][iso][args.metric] for iso in isos]$/;"	v
nn	nnModules.py	/^import torch.nn as nn$/;"	I
init	nnModules.py	/^import torch.nn.init as init$/;"	I
F	nnModules.py	/^import torch.nn.functional as F$/;"	I
init_weights	nnModules.py	/^def init_weights(m):$/;"	f
DnCNN	nnModules.py	/^class DnCNN(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, depth=22, n_channels=64, image_channels=3, use_bnorm=True, kernel_size=3,/;"	m	class:DnCNN
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:DnCNN
_initialize_weights	nnModules.py	/^    def _initialize_weights(self):$/;"	m	class:DnCNN
RedishCNN	nnModules.py	/^class RedishCNN(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, n_channels=128, image_channels=3, kernel_size=5, depth=30):$/;"	m	class:RedishCNN
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:RedishCNN
RedCNN	nnModules.py	/^class RedCNN(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, n_channels=128, image_channels=3, kernel_size=5, depth=30):$/;"	m	class:RedCNN
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:RedCNN
DecEncCNN	nnModules.py	/^class DecEncCNN(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, n_channels=128, image_channels=3, kernel_size=5, depth=30):$/;"	m	class:DecEncCNN
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:DecEncCNN
double_conv	nnModules.py	/^class double_conv(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, in_ch, out_ch):$/;"	m	class:double_conv
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:double_conv
inconv	nnModules.py	/^class inconv(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, in_ch, out_ch):$/;"	m	class:inconv
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:inconv
down	nnModules.py	/^class down(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, in_ch, out_ch):$/;"	m	class:down
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:down
up	nnModules.py	/^class up(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, in_ch, out_ch, bilinear=False):$/;"	m	class:up
forward	nnModules.py	/^    def forward(self, x1, x2):$/;"	m	class:up
outconv	nnModules.py	/^class outconv(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, in_ch, out_ch):$/;"	m	class:outconv
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:outconv
UNet	nnModules.py	/^class UNet(nn.Module):$/;"	c
__init__	nnModules.py	/^    def __init__(self, n_channels, n_classes):$/;"	m	class:UNet
forward	nnModules.py	/^    def forward(self, x):$/;"	m	class:UNet
